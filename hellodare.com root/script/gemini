// Refactored Resize Handler and Update Function

// Keep track of initialized videos globally or pass them appropriately
let currentVideos = []; 

export async function renderPlaylist() {
    currentVideos = await initializeVideos(); // Store the videos
    renderVideos(currentVideos); // Initial render

    // Call initializePlayer *after* the initial render
    currentVideos.forEach(video => video.initializePlayer()); 

    // Debounce resize events for performance
    let resizeTimeout;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            updateDOMVideoSizes(currentVideos); // Just update sizes in DOM
        }, 150); // Adjust debounce delay as needed (e.g., 150ms)
    });
}

async function initializeVideos() {
    const videos = await Promise.all(
        playlist.map(async (videoData) => {
            const video = new Video(videoData);
            await video.initialize();
            return video;
        })
    );

    // Calculate initial sizes (doesn't need to render here)
    updateVideoObjectSizes(videos); 

    return videos;
}

// Renamed: Calculates and stores sizes in video objects
function updateVideoObjectSizes(videos) {
    const setWidth = getDynamicWidth();
    // setHeight isn't used in updateVideoSizes, so calculation is optional here
    // const setHeight = getDynamicHeight(); 

    videos.forEach((video) => {
        video.updateVideoSizes(setWidth /*, setHeight */); 
        // console.log for debugging is fine here
        // console.log(video.videoWidth, video.videoHeight, video.aspectRatio);
    });
}

// New function: Updates the DOM elements' styles directly
function updateDOMVideoSizes(videos) {
    // Recalculate sizes based on current width
    updateVideoObjectSizes(videos); 

    // Update existing DOM elements
    videos.forEach((video) => {
        const videoItem = document.querySelector(`#iframe-${video.id}`)?.closest('.video-item'); 
        const controls = document.querySelector(`#playPauseButton-${video.id}`)?.closest('.video-controls');

        if (videoItem) {
            videoItem.style.width = `${video.videoWidth}px`;
            videoItem.style.height = `${video.videoHeight}px`;
        }
        if (controls) {
            controls.style.width = `${video.videoWidth}px`;
        }
    });
}

// renderVideos remains mostly the same for the initial render
// but no longer needs to be called on resize.
function renderVideos(videos) {
    let playlistHTML = '';

    if (!videos || videos.length === 0) {
        console.error("No videos to render.");
        return;
    }

    videos.forEach((video) => {
        // Use calculated sizes for the initial render
        playlistHTML += `
        <div class="video-container">
            <div class="video-item" style="width: ${video.videoWidth}px; height: ${video.videoHeight}px;">
                <iframe src="${video.iframeSrc}" 
                        id="iframe-${video.id}"
                        style="width: 100%; height: 100%; border-radius: 10px;"
                        loading="lazy" 
                        frameborder="0" 
                        allow="autoplay; fullscreen" 
                        allowfullscreen>
                </iframe>
            </div>
    
            <div class="video-controls" style="width: ${video.videoWidth}px;">
                <button class="controls-button play-pause-button" id="playPauseButton-${video.id}">Play</button>
                <button class="controls-button sound-button" id="soundButton-${video.id}">Sound Off</button>
            </div>
        </div>
        `;
        // console.log(video.videoWidth, video.videoHeight, video.aspectRatio);
    });

    const trackElement = document.querySelector('.js-video-track');
    if (trackElement) {
        trackElement.innerHTML = playlistHTML;
    } else {
         console.error("'.js-video-track' element not found for rendering.");
         return; // Stop if container not found
    }

    // Attach event listeners (needs player initialized)
    videos.forEach((video) => {
        // Crucially, initialize the player instance HERE after the iframe exists
        // video.initializePlayer(); // Moved this call to after renderPlaylist calls renderVideos

        const playPauseButton = document.getElementById(`playPauseButton-${video.id}`);
        const soundButton = document.getElementById(`soundButton-${video.id}`);

        if (playPauseButton) {
            playPauseButton.addEventListener('click', () => {
                // Ensure player is initialized before trying to use it
                if (!video.player) video.initializePlayer(); 
                video.togglePlayPause(playPauseButton);
            });
        }

        if (soundButton) {
            soundButton.addEventListener('click', () => {
                 // Ensure player is initialized before trying to use it
                if (!video.player) video.initializePlayer();
                video.toggleSound(soundButton);
            });
        }
    });
}

// Add initializePlayer method call in the Video class
class Video {
    // ... (constructor, initialize, other methods) ...

    initializePlayer() {
        // Only initialize if not already done
        if (this.player) return; 
        
        const iframe = document.getElementById(`iframe-${this.id}`);
        if (iframe) {
            try {
                this.player = new Vimeo.Player(iframe);
                console.log(`Vimeo Player initialized for ${this.id}`);

                // Optional: Add listeners for player events if needed
                // this.player.on('play', () => { console.log(`Video ${this.id} played`); });
                // this.player.on('pause', () => { console.log(`Video ${this.id} paused`); });
                // this.player.on('ended', () => { console.log(`Video ${this.id} ended`); });
                
            } catch (error) {
                 console.error(`Error initializing Vimeo Player for ${this.id}:`, error);
            }

        } else {
            // This might happen if called too early or if render failed
            console.warn(`Iframe not found for video ID: ${this.id} during player initialization.`);
        }
    }

    // ... (rest of the Video class) ...
}

// Make sure the playlist variable is defined somewhere globally or imported
// Example: const playlist = [ { vimeoid: '12345', title: '...', ... }, ... ];

// Make sure Vimeo Player API script is included in your HTML:
// <script src="https://player.vimeo.com/api/player.js"></script>

// Initial call to start everything
// renderPlaylist();